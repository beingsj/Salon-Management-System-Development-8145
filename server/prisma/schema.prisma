// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  phone     String?
  role      Role     @default(STAFF)
  isActive  Boolean  @default(true)
  branchId  Int?
  branch    Branch?  @relation(fields: [branchId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  appointments AppointmentStaff[]
  sales        Sale[]
  
  @@map("users")
}

model Branch {
  id          Int      @id @default(autoincrement())
  name        String
  address     String
  city        String
  state       String
  pincode     String
  gstin       String   @unique
  managerName String
  managerPhone String
  managerEmail String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  staff        User[]
  customers    Customer[]
  appointments Appointment[]
  sales        Sale[]
  services     BranchService[]
  
  @@map("branches")
}

model Customer {
  id          Int      @id @default(autoincrement())
  name        String
  phone       String
  email       String?
  address     String?
  dateOfBirth DateTime?
  gender      Gender?
  preferences String?
  totalVisits Int      @default(0)
  totalSpent  Float    @default(0)
  lastVisit   DateTime?
  branchId    Int
  branch      Branch   @relation(fields: [branchId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  appointments Appointment[]
  sales        Sale[]
  
  @@map("customers")
}

model Service {
  id           Int     @id @default(autoincrement())
  name         String
  description  String?
  basePrice    Float
  duration     Int     // in minutes
  category     String
  gstInclusive Boolean @default(true)
  gstRate      Float?
  cgstRate     Float?
  sgstRate     Float?
  isActive     Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  branches     BranchService[]
  appointments AppointmentService[]
  saleItems    SaleItem[]
  
  @@map("services")
}

model BranchService {
  id        Int     @id @default(autoincrement())
  branchId  Int
  serviceId Int
  price     Float   // Branch-specific pricing
  isActive  Boolean @default(true)
  
  branch    Branch  @relation(fields: [branchId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])
  
  @@unique([branchId, serviceId])
  @@map("branch_services")
}

model Appointment {
  id          Int      @id @default(autoincrement())
  customerId  Int
  branchId    Int
  date        DateTime
  startTime   String
  endTime     String
  status      AppointmentStatus @default(SCHEDULED)
  notes       String?
  totalAmount Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])
  branch   Branch   @relation(fields: [branchId], references: [id])

  // Relations
  services AppointmentService[]
  staff    AppointmentStaff[]
  sale     Sale?
  
  @@map("appointments")
}

model AppointmentService {
  id            Int @id @default(autoincrement())
  appointmentId Int
  serviceId     Int
  price         Float
  duration      Int
  
  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  service     Service     @relation(fields: [serviceId], references: [id])
  
  @@unique([appointmentId, serviceId])
  @@map("appointment_services")
}

model AppointmentStaff {
  id            Int @id @default(autoincrement())
  appointmentId Int
  staffId       Int
  
  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  staff       User        @relation(fields: [staffId], references: [id])
  
  @@unique([appointmentId, staffId])
  @@map("appointment_staff")
}

model Sale {
  id            Int         @id @default(autoincrement())
  invoiceNumber String      @unique
  customerId    Int
  branchId      Int
  staffId       Int
  appointmentId Int?        @unique
  subtotal      Float
  cgstAmount    Float       @default(0)
  sgstAmount    Float       @default(0)
  totalTax      Float       @default(0)
  discount      Float       @default(0)
  totalAmount   Float
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(COMPLETED)
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  customer    Customer     @relation(fields: [customerId], references: [id])
  branch      Branch       @relation(fields: [branchId], references: [id])
  staff       User         @relation(fields: [staffId], references: [id])
  appointment Appointment? @relation(fields: [appointmentId], references: [id])

  // Relations
  items SaleItem[]
  
  @@map("sales")
}

model SaleItem {
  id        Int   @id @default(autoincrement())
  saleId    Int
  serviceId Int
  quantity  Int   @default(1)
  price     Float
  cgst      Float @default(0)
  sgst      Float @default(0)
  total     Float

  sale    Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id])
  
  @@map("sale_items")
}

// Enums
enum Role {
  ADMIN
  BRANCH_MANAGER
  STAFF
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentMethod {
  CASH
  UPI
  CARD
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}